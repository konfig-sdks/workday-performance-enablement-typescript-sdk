/* tslint:disable */
/* eslint-disable */
/*
performanceEnablement

The Performance Management service enables applications to access and create feedback about workers in the system.

The version of the OpenAPI document: v5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { MULTIPLEINSTANCEMODELREFERENCE } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PromptValuesApi - axios parameter creator
 * @export
 */
export const PromptValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [workers] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: async (limit?: number, offset?: number, workers?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/workersToNotify/workersToNotify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (workers) {
                localVarQueryParameter['workers'] = workers;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/workersToNotify/workersToNotify',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [templateType] The feedback template type for this feedback event, either Feedback on Self, 133de7d11fea10001dbb45a701140098 or Feedback on Worker 133de7d11fea10001dbb45973dec0097. This field is required.
         * @param {string} [worker] The worker WID. This field is required for the Feedback on Worker template and not supported for the Feedback on Self template. It can\&#39;t be the processing worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_1: async (limit?: number, offset?: number, templateType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/feedbackTemplate/feedbackTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (templateType !== undefined) {
                localVarQueryParameter['templateType'] = templateType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/feedbackTemplate/feedbackTemplate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_2: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/feedbackOnWorker/feedbackOnWorker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/feedbackOnWorker/feedbackOnWorker',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [templateType] The feedback template type for this feedback event, either Feedback on Self, 133de7d11fea10001dbb45a701140098 or Feedback on Worker 133de7d11fea10001dbb45973dec0097. This field is required.
         * @param {string} [worker] The worker WID. This field is required for the Feedback on Worker templateType and not supported for the Feedback on Self templateType. It can\&#39;t be the processing worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_3: async (limit?: number, offset?: number, templateType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/feedbackResponder/feedbackResponder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (templateType !== undefined) {
                localVarQueryParameter['templateType'] = templateType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/feedbackResponder/feedbackResponder',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [relatesToTag] The talent tag linked to the feedback question.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_4: async (limit?: number, offset?: number, relatesToTag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/relatesTo/relatesTo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (relatesToTag !== undefined) {
                localVarQueryParameter['relatesToTag'] = relatesToTag;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/relatesTo/relatesTo',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromptValuesApi - functional programming interface
 * @export
 */
export const PromptValuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromptValuesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(requestParameters.limit, requestParameters.offset, requestParameters.workers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_1(requestParameters.limit, requestParameters.offset, requestParameters.templateType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_2(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_3(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_3(requestParameters.limit, requestParameters.offset, requestParameters.templateType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_4(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_4(requestParameters.limit, requestParameters.offset, requestParameters.relatesToTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromptValuesApi - factory interface
 * @export
 */
export const PromptValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromptValuesApiFp(configuration)
    return {
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_3(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_4(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_4(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInstances operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstancesRequest
 */
export type PromptValuesApiGetInstancesRequest = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances
    */
    readonly workers?: Array<string>
    
}

/**
 * Request parameters for getInstances_1 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances0Request
 */
export type PromptValuesApiGetInstances0Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly offset?: number
    
    /**
    * The feedback template type for this feedback event, either Feedback on Self, 133de7d11fea10001dbb45a701140098 or Feedback on Worker 133de7d11fea10001dbb45973dec0097. This field is required.
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly templateType?: string
    
    /**
    * The worker WID. This field is required for the Feedback on Worker template and not supported for the Feedback on Self template. It can\'t be the processing worker.
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_2 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances1Request
 */
export type PromptValuesApiGetInstances1Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_3 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances2Request
 */
export type PromptValuesApiGetInstances2Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly offset?: number
    
    /**
    * The feedback template type for this feedback event, either Feedback on Self, 133de7d11fea10001dbb45a701140098 or Feedback on Worker 133de7d11fea10001dbb45973dec0097. This field is required.
    * @type {string}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly templateType?: string
    
    /**
    * The worker WID. This field is required for the Feedback on Worker templateType and not supported for the Feedback on Self templateType. It can\'t be the processing worker.
    * @type {string}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_4 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances3Request
 */
export type PromptValuesApiGetInstances3Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly offset?: number
    
    /**
    * The talent tag linked to the feedback question.
    * @type {string}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly relatesToTag?: string
    
}

/**
 * PromptValuesApiGenerated - object-oriented interface
 * @export
 * @class PromptValuesApiGenerated
 * @extends {BaseAPI}
 */
export class PromptValuesApiGenerated extends BaseAPI {
    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_3(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_4(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
