/* tslint:disable */
/* eslint-disable */
/*
performanceEnablement

The Performance Management service enables applications to access and create feedback about workers in the system.

The version of the OpenAPI document: v5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadgeAfd6ac52d62510001357f891ccfd0003 } from '../models';
// @ts-ignore
import { BusinessProcessParameters2b4c8a6ca069100035b85907ae2c0000 } from '../models';
// @ts-ignore
import { BusinessProcessParameters4db9c44d36231000134c7a5b6f3b0000 } from '../models';
// @ts-ignore
import { BusinessProcessParametersAfd6ac52d6251000117d0a60ed8b0000 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { FeedbackAbout2b4c8a6ca069100035b85907ae2c0002 } from '../models';
// @ts-ignore
import { FeedbackAbout4db9c44d36231000134c7b8eb3800003 } from '../models';
// @ts-ignore
import { FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 } from '../models';
// @ts-ignore
import { FeedbackRespondersFfdd5de32f7f100016dbb1b188d70000 } from '../models';
// @ts-ignore
import { FeedbackTemplate2b4c8a6ca069100035b859a141200001 } from '../models';
// @ts-ignore
import { FeedbackTemplate4db9c44d36231000134c7b8eb3800000 } from '../models';
// @ts-ignore
import { FromWorkerAfd6ac52d62510001357f891ccfd0001 } from '../models';
// @ts-ignore
import { GetWorkersFeedbackAlsoAbout3ab333661034100010b5635b2f7a0302 } from '../models';
// @ts-ignore
import { GoalsSummary2c793e888bcd100033e663075a2b0000 } from '../models';
// @ts-ignore
import { RelatedFeedbackEvents9708c966f04f10000e1e9b7f9a5c0000 } from '../models';
// @ts-ignore
import { RelatesTo9d12ad407f0f10001c3949add7d40000 } from '../models';
// @ts-ignore
import { RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 } from '../models';
// @ts-ignore
import { RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 } from '../models';
// @ts-ignore
import { RequestedFeedbackQuestionFfdd5de32f7f1000144df0c21e640000 } from '../models';
// @ts-ignore
import { ToWorkerF4946919a39f10000f03207b1f230000 } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { WorkerDataC2466b0778c610000d1936006720000e } from '../models';
// @ts-ignore
import { WorkersGetCollectionStaffingResponse } from '../models';
// @ts-ignore
import { WorkersGetFeedbackEventsResponse } from '../models';
// @ts-ignore
import { WorkersGetGoalsResponse } from '../models';
// @ts-ignore
import { WorkersGetRequestedFeedbackEventsResponse } from '../models';
// @ts-ignore
import { WorkersGetSelfRequestedFeedbackResponse } from '../models';
// @ts-ignore
import { WorkersToNotify9e478586f65410001035b6c26a4c0000 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkersApi - axios parameter creator
 * @export
 */
export const WorkersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a single instance of feedback for each of the specified workers with the provided data. The worker is specified by the Workday ID of the worker. You can use a returned id from GET /workers in the Staffing service /staffing.  If you want to see the status of conditionally hidden attributes for this request, call this method with the wd-metadata-api-version header. Set the header value to v1 (or the latest Workday Metadata API version). When you specify the wd-metadata-api-version header, this method returns the response metadata, instead of the actual data.  This endpoint is equivalent to the Give Feedback task in Workday. This endpoint initiates the Give Feedback business process or the Give Feedback to Multiple Recipients business process based on the request.  Secured by: Give Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Creates a single feedback given event instance about the specified worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000} feedbackEventDetailAfd6ac52d62510001086b5c85cd50000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedbackEvent: async (iD: string, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000: FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createFeedbackEvent', 'iD', iD)
            // verify required parameter 'feedbackEventDetailAfd6ac52d62510001086b5c85cd50000' is not null or undefined
            assertParamExists('createFeedbackEvent', 'feedbackEventDetailAfd6ac52d62510001086b5c85cd50000', feedbackEventDetailAfd6ac52d62510001086b5c85cd50000)
            const localVarPath = `/workers/{ID}/anytimeFeedbackEvents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: feedbackEventDetailAfd6ac52d62510001086b5c85cd50000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/anytimeFeedbackEvents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {boolean} [includeTerminatedWorkers] Include terminated workers in the output
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [search] Searches workers by name or worker ID. The search is case-insensitive. You can include space-delimited search strings for an OR search.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionStaffing: async (includeTerminatedWorkers?: boolean, limit?: number, offset?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (includeTerminatedWorkers !== undefined) {
                localVarQueryParameter['includeTerminatedWorkers'] = includeTerminatedWorkers;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single feedback given event instance with the specified ID.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a feedback given event instance with the specified ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackEvent: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getFeedbackEvent', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getFeedbackEvent', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/anytimeFeedbackEvents/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/anytimeFeedbackEvents/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all feedback given events about the specified worker. Could also return a feedback multiple recipient event.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of feedback given events about the specified worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackEvents: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getFeedbackEvents', 'iD', iD)
            const localVarPath = `/workers/{ID}/anytimeFeedbackEvents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/anytimeFeedbackEvents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all goals for a worker with the specified ID. You can use a returned id from GET /workers in the Staffing service. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
         * @summary Retrieves a collection of goals for a specific worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoals: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getGoals', 'iD', iD)
            const localVarPath = `/workers/{ID}/goals`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single requested feedback event instance for the specified worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestedEvent: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getRequestedEvent', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getRequestedEvent', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/requestedFeedbackOnWorkerEvents/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/requestedFeedbackOnWorkerEvents/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of requested feedback events for the specified worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestedFeedbackEvents: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getRequestedFeedbackEvents', 'iD', iD)
            const localVarPath = `/workers/{ID}/requestedFeedbackOnWorkerEvents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/requestedFeedbackOnWorkerEvents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all self-requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of self-requested feedback events for the specified worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfRequestedFeedback: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getSelfRequestedFeedback', 'iD', iD)
            const localVarPath = `/workers/{ID}/requestedFeedbackOnSelfEvents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/requestedFeedbackOnSelfEvents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single self-requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single self-requested feedback event instance for the specified worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfRequestedFeedbackEvent: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getSelfRequestedFeedbackEvent', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getSelfRequestedFeedbackEvent', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/requestedFeedbackOnSelfEvents/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/requestedFeedbackOnSelfEvents/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single goal instance for a worker with the specified ID. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
         * @summary Retrieves a single goal instance for a specific worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleGoal: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getSingleGoal', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getSingleGoal', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/goals/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/goals/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffingInformation: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStaffingInformation', 'iD', iD)
            const localVarPath = `/workers/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Secured by: Get Feedback on Self REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @param {string} iD The Workday ID of the resource.
         * @param {RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000} requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFeedbackOnSelfEvents: async (iD: string, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000: RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('requestFeedbackOnSelfEvents', 'iD', iD)
            // verify required parameter 'requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000' is not null or undefined
            assertParamExists('requestFeedbackOnSelfEvents', 'requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000', requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000)
            const localVarPath = `/workers/{ID}/requestedFeedbackOnSelfEvents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/requestedFeedbackOnSelfEvents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Not applicable.  Secured by: Get Feedback on \\~Worker\\~ REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Not applicable.
         * @param {string} iD The Workday ID of the resource.
         * @param {RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000} requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFeedbackOnWorkerEvents: async (iD: string, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000: RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('requestFeedbackOnWorkerEvents', 'iD', iD)
            // verify required parameter 'requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000' is not null or undefined
            assertParamExists('requestFeedbackOnWorkerEvents', 'requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000', requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000)
            const localVarPath = `/workers/{ID}/requestedFeedbackOnWorkerEvents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/requestedFeedbackOnWorkerEvents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkersApi - functional programming interface
 * @export
 */
export const WorkersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a single instance of feedback for each of the specified workers with the provided data. The worker is specified by the Workday ID of the worker. You can use a returned id from GET /workers in the Staffing service /staffing.  If you want to see the status of conditionally hidden attributes for this request, call this method with the wd-metadata-api-version header. Set the header value to v1 (or the latest Workday Metadata API version). When you specify the wd-metadata-api-version header, this method returns the response metadata, instead of the actual data.  This endpoint is equivalent to the Give Feedback task in Workday. This endpoint initiates the Give Feedback business process or the Give Feedback to Multiple Recipients business process based on the request.  Secured by: Give Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Creates a single feedback given event instance about the specified worker.
         * @param {WorkersApiCreateFeedbackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeedbackEvent(requestParameters: WorkersApiCreateFeedbackEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000>> {
            const feedbackEventDetailAfd6ac52d62510001086b5c85cd50000: FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeedbackEvent(requestParameters.iD, feedbackEventDetailAfd6ac52d62510001086b5c85cd50000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetCollectionStaffingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionStaffing(requestParameters: WorkersApiGetCollectionStaffingRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetCollectionStaffingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionStaffing(requestParameters.includeTerminatedWorkers, requestParameters.limit, requestParameters.offset, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a single feedback given event instance with the specified ID.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a feedback given event instance with the specified ID.
         * @param {WorkersApiGetFeedbackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedbackEvent(requestParameters: WorkersApiGetFeedbackEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedbackEvent(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all feedback given events about the specified worker. Could also return a feedback multiple recipient event.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of feedback given events about the specified worker.
         * @param {WorkersApiGetFeedbackEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedbackEvents(requestParameters: WorkersApiGetFeedbackEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetFeedbackEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedbackEvents(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all goals for a worker with the specified ID. You can use a returned id from GET /workers in the Staffing service. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
         * @summary Retrieves a collection of goals for a specific worker.
         * @param {WorkersApiGetGoalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoals(requestParameters: WorkersApiGetGoalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoals(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a single requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single requested feedback event instance for the specified worker.
         * @param {WorkersApiGetRequestedEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestedEvent(requestParameters: WorkersApiGetRequestedEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestedEvent(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of requested feedback events for the specified worker.
         * @param {WorkersApiGetRequestedFeedbackEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestedFeedbackEvents(requestParameters: WorkersApiGetRequestedFeedbackEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetRequestedFeedbackEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestedFeedbackEvents(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all self-requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of self-requested feedback events for the specified worker.
         * @param {WorkersApiGetSelfRequestedFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfRequestedFeedback(requestParameters: WorkersApiGetSelfRequestedFeedbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetSelfRequestedFeedbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelfRequestedFeedback(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a single self-requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single self-requested feedback event instance for the specified worker.
         * @param {WorkersApiGetSelfRequestedFeedbackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfRequestedFeedbackEvent(requestParameters: WorkersApiGetSelfRequestedFeedbackEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelfRequestedFeedbackEvent(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a single goal instance for a worker with the specified ID. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
         * @summary Retrieves a single goal instance for a specific worker.
         * @param {WorkersApiGetSingleGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleGoal(requestParameters: WorkersApiGetSingleGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsSummary2c793e888bcd100033e663075a2b0000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleGoal(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetStaffingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffingInformation(requestParameters: WorkersApiGetStaffingInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerDataC2466b0778c610000d1936006720000e>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffingInformation(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Secured by: Get Feedback on Self REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @param {WorkersApiRequestFeedbackOnSelfEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestFeedbackOnSelfEvents(requestParameters: WorkersApiRequestFeedbackOnSelfEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000>> {
            const requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000: RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestFeedbackOnSelfEvents(requestParameters.iD, requestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Not applicable.  Secured by: Get Feedback on \\~Worker\\~ REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Not applicable.
         * @param {WorkersApiRequestFeedbackOnWorkerEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestFeedbackOnWorkerEvents(requestParameters: WorkersApiRequestFeedbackOnWorkerEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000>> {
            const requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000: RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestFeedbackOnWorkerEvents(requestParameters.iD, requestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkersApi - factory interface
 * @export
 */
export const WorkersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkersApiFp(configuration)
    return {
        /**
         * Creates a single instance of feedback for each of the specified workers with the provided data. The worker is specified by the Workday ID of the worker. You can use a returned id from GET /workers in the Staffing service /staffing.  If you want to see the status of conditionally hidden attributes for this request, call this method with the wd-metadata-api-version header. Set the header value to v1 (or the latest Workday Metadata API version). When you specify the wd-metadata-api-version header, this method returns the response metadata, instead of the actual data.  This endpoint is equivalent to the Give Feedback task in Workday. This endpoint initiates the Give Feedback business process or the Give Feedback to Multiple Recipients business process based on the request.  Secured by: Give Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Creates a single feedback given event instance about the specified worker.
         * @param {WorkersApiCreateFeedbackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedbackEvent(requestParameters: WorkersApiCreateFeedbackEventRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> {
            return localVarFp.createFeedbackEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetCollectionStaffingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionStaffing(requestParameters: WorkersApiGetCollectionStaffingRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkersGetCollectionStaffingResponse> {
            return localVarFp.getCollectionStaffing(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single feedback given event instance with the specified ID.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a feedback given event instance with the specified ID.
         * @param {WorkersApiGetFeedbackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackEvent(requestParameters: WorkersApiGetFeedbackEventRequest, options?: AxiosRequestConfig): AxiosPromise<FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000> {
            return localVarFp.getFeedbackEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all feedback given events about the specified worker. Could also return a feedback multiple recipient event.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of feedback given events about the specified worker.
         * @param {WorkersApiGetFeedbackEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbackEvents(requestParameters: WorkersApiGetFeedbackEventsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetFeedbackEventsResponse> {
            return localVarFp.getFeedbackEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all goals for a worker with the specified ID. You can use a returned id from GET /workers in the Staffing service. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
         * @summary Retrieves a collection of goals for a specific worker.
         * @param {WorkersApiGetGoalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoals(requestParameters: WorkersApiGetGoalsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetGoalsResponse> {
            return localVarFp.getGoals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single requested feedback event instance for the specified worker.
         * @param {WorkersApiGetRequestedEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestedEvent(requestParameters: WorkersApiGetRequestedEventRequest, options?: AxiosRequestConfig): AxiosPromise<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> {
            return localVarFp.getRequestedEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of requested feedback events for the specified worker.
         * @param {WorkersApiGetRequestedFeedbackEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestedFeedbackEvents(requestParameters: WorkersApiGetRequestedFeedbackEventsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetRequestedFeedbackEventsResponse> {
            return localVarFp.getRequestedFeedbackEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all self-requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of self-requested feedback events for the specified worker.
         * @param {WorkersApiGetSelfRequestedFeedbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfRequestedFeedback(requestParameters: WorkersApiGetSelfRequestedFeedbackRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetSelfRequestedFeedbackResponse> {
            return localVarFp.getSelfRequestedFeedback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single self-requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single self-requested feedback event instance for the specified worker.
         * @param {WorkersApiGetSelfRequestedFeedbackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfRequestedFeedbackEvent(requestParameters: WorkersApiGetSelfRequestedFeedbackEventRequest, options?: AxiosRequestConfig): AxiosPromise<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> {
            return localVarFp.getSelfRequestedFeedbackEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single goal instance for a worker with the specified ID. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
         * @summary Retrieves a single goal instance for a specific worker.
         * @param {WorkersApiGetSingleGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleGoal(requestParameters: WorkersApiGetSingleGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsSummary2c793e888bcd100033e663075a2b0000> {
            return localVarFp.getSingleGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetStaffingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffingInformation(requestParameters: WorkersApiGetStaffingInformationRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerDataC2466b0778c610000d1936006720000e> {
            return localVarFp.getStaffingInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Secured by: Get Feedback on Self REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @param {WorkersApiRequestFeedbackOnSelfEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFeedbackOnSelfEvents(requestParameters: WorkersApiRequestFeedbackOnSelfEventsRequest, options?: AxiosRequestConfig): AxiosPromise<RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000> {
            return localVarFp.requestFeedbackOnSelfEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Not applicable.  Secured by: Get Feedback on \\~Worker\\~ REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Not applicable.
         * @param {WorkersApiRequestFeedbackOnWorkerEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFeedbackOnWorkerEvents(requestParameters: WorkersApiRequestFeedbackOnWorkerEventsRequest, options?: AxiosRequestConfig): AxiosPromise<RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000> {
            return localVarFp.requestFeedbackOnWorkerEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFeedbackEvent operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateFeedbackEventRequest
 */
export type WorkersApiCreateFeedbackEventRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateFeedbackEvent
    */
    readonly iD: string
    
} & FeedbackEventDetailAfd6ac52d62510001086b5c85cd50000

/**
 * Request parameters for getCollectionStaffing operation in WorkersApi.
 * @export
 * @interface WorkersApiGetCollectionStaffingRequest
 */
export type WorkersApiGetCollectionStaffingRequest = {
    
    /**
    * Include terminated workers in the output
    * @type {boolean}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly includeTerminatedWorkers?: boolean
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly offset?: number
    
    /**
    * Searches workers by name or worker ID. The search is case-insensitive. You can include space-delimited search strings for an OR search.
    * @type {string}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly search?: string
    
}

/**
 * Request parameters for getFeedbackEvent operation in WorkersApi.
 * @export
 * @interface WorkersApiGetFeedbackEventRequest
 */
export type WorkersApiGetFeedbackEventRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetFeedbackEvent
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetFeedbackEvent
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getFeedbackEvents operation in WorkersApi.
 * @export
 * @interface WorkersApiGetFeedbackEventsRequest
 */
export type WorkersApiGetFeedbackEventsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetFeedbackEvents
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetFeedbackEvents
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetFeedbackEvents
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getGoals operation in WorkersApi.
 * @export
 * @interface WorkersApiGetGoalsRequest
 */
export type WorkersApiGetGoalsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetGoals
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetGoals
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetGoals
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getRequestedEvent operation in WorkersApi.
 * @export
 * @interface WorkersApiGetRequestedEventRequest
 */
export type WorkersApiGetRequestedEventRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetRequestedEvent
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetRequestedEvent
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getRequestedFeedbackEvents operation in WorkersApi.
 * @export
 * @interface WorkersApiGetRequestedFeedbackEventsRequest
 */
export type WorkersApiGetRequestedFeedbackEventsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetRequestedFeedbackEvents
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetRequestedFeedbackEvents
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetRequestedFeedbackEvents
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getSelfRequestedFeedback operation in WorkersApi.
 * @export
 * @interface WorkersApiGetSelfRequestedFeedbackRequest
 */
export type WorkersApiGetSelfRequestedFeedbackRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetSelfRequestedFeedback
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetSelfRequestedFeedback
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetSelfRequestedFeedback
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getSelfRequestedFeedbackEvent operation in WorkersApi.
 * @export
 * @interface WorkersApiGetSelfRequestedFeedbackEventRequest
 */
export type WorkersApiGetSelfRequestedFeedbackEventRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetSelfRequestedFeedbackEvent
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetSelfRequestedFeedbackEvent
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getSingleGoal operation in WorkersApi.
 * @export
 * @interface WorkersApiGetSingleGoalRequest
 */
export type WorkersApiGetSingleGoalRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetSingleGoal
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetSingleGoal
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStaffingInformation operation in WorkersApi.
 * @export
 * @interface WorkersApiGetStaffingInformationRequest
 */
export type WorkersApiGetStaffingInformationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetStaffingInformation
    */
    readonly iD: string
    
}

/**
 * Request parameters for requestFeedbackOnSelfEvents operation in WorkersApi.
 * @export
 * @interface WorkersApiRequestFeedbackOnSelfEventsRequest
 */
export type WorkersApiRequestFeedbackOnSelfEventsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiRequestFeedbackOnSelfEvents
    */
    readonly iD: string
    
} & RequestedFeedbackOnSelfEventDetail19acce0101b310002e6bf03e1bbc0000

/**
 * Request parameters for requestFeedbackOnWorkerEvents operation in WorkersApi.
 * @export
 * @interface WorkersApiRequestFeedbackOnWorkerEventsRequest
 */
export type WorkersApiRequestFeedbackOnWorkerEventsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiRequestFeedbackOnWorkerEvents
    */
    readonly iD: string
    
} & RequestedFeedbackOnWorkerEventDetail2b4c8a6ca069100035b8586e16c20000

/**
 * WorkersApiGenerated - object-oriented interface
 * @export
 * @class WorkersApiGenerated
 * @extends {BaseAPI}
 */
export class WorkersApiGenerated extends BaseAPI {
    /**
     * Creates a single instance of feedback for each of the specified workers with the provided data. The worker is specified by the Workday ID of the worker. You can use a returned id from GET /workers in the Staffing service /staffing.  If you want to see the status of conditionally hidden attributes for this request, call this method with the wd-metadata-api-version header. Set the header value to v1 (or the latest Workday Metadata API version). When you specify the wd-metadata-api-version header, this method returns the response metadata, instead of the actual data.  This endpoint is equivalent to the Give Feedback task in Workday. This endpoint initiates the Give Feedback business process or the Give Feedback to Multiple Recipients business process based on the request.  Secured by: Give Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Creates a single feedback given event instance about the specified worker.
     * @param {WorkersApiCreateFeedbackEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createFeedbackEvent(requestParameters: WorkersApiCreateFeedbackEventRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createFeedbackEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @summary Retrieves a collection of workers and current staffing information.
     * @param {WorkersApiGetCollectionStaffingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getCollectionStaffing(requestParameters: WorkersApiGetCollectionStaffingRequest = {}, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getCollectionStaffing(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single feedback given event instance with the specified ID.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a feedback given event instance with the specified ID.
     * @param {WorkersApiGetFeedbackEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getFeedbackEvent(requestParameters: WorkersApiGetFeedbackEventRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getFeedbackEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all feedback given events about the specified worker. Could also return a feedback multiple recipient event.  This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Anytime Feedback, Worker Data: Anytime Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a collection of feedback given events about the specified worker.
     * @param {WorkersApiGetFeedbackEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getFeedbackEvents(requestParameters: WorkersApiGetFeedbackEventsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getFeedbackEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all goals for a worker with the specified ID. You can use a returned id from GET /workers in the Staffing service. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
     * @summary Retrieves a collection of goals for a specific worker.
     * @param {WorkersApiGetGoalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getGoals(requestParameters: WorkersApiGetGoalsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getGoals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a single requested feedback event instance for the specified worker.
     * @param {WorkersApiGetRequestedEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getRequestedEvent(requestParameters: WorkersApiGetRequestedEventRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getRequestedEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Role Requested Feedback, Worker Data: Role Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a collection of requested feedback events for the specified worker.
     * @param {WorkersApiGetRequestedFeedbackEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getRequestedFeedbackEvents(requestParameters: WorkersApiGetRequestedFeedbackEventsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getRequestedFeedbackEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all self-requested feedback events for the specified worker. This endpoint is equivalent to the View Feedback task in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a collection of self-requested feedback events for the specified worker.
     * @param {WorkersApiGetSelfRequestedFeedbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getSelfRequestedFeedback(requestParameters: WorkersApiGetSelfRequestedFeedbackRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getSelfRequestedFeedback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single self-requested feedback event instance for the specified worker. This endpoint is equivalent to the View Feedback and View Feedback by Request tasks in Workday.  Secured by: Self-Service: Self Requested Feedback, Worker Data: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a single self-requested feedback event instance for the specified worker.
     * @param {WorkersApiGetSelfRequestedFeedbackEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getSelfRequestedFeedbackEvent(requestParameters: WorkersApiGetSelfRequestedFeedbackEventRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getSelfRequestedFeedbackEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single goal instance for a worker with the specified ID. The goal data includes name, description, category, tags, associated reviews, due date, completed date, status, creator, worker it is for, supporting organization goal, locked reason, and activity streamable item.  Secured by: Self-Service: Employee Goals, Worker Data: Employee Goals  Scope: Performance Enablement
     * @summary Retrieves a single goal instance for a specific worker.
     * @param {WorkersApiGetSingleGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getSingleGoal(requestParameters: WorkersApiGetSingleGoalRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getSingleGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @summary Retrieves a collection of workers and current staffing information.
     * @param {WorkersApiGetStaffingInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getStaffingInformation(requestParameters: WorkersApiGetStaffingInformationRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getStaffingInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Secured by: Get Feedback on Self REST+TG  Scope: Performance Enablement, Worker Profile and Skills
     * @param {WorkersApiRequestFeedbackOnSelfEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public requestFeedbackOnSelfEvents(requestParameters: WorkersApiRequestFeedbackOnSelfEventsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).requestFeedbackOnSelfEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Not applicable.  Secured by: Get Feedback on \\~Worker\\~ REST+TG  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Not applicable.
     * @param {WorkersApiRequestFeedbackOnWorkerEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public requestFeedbackOnWorkerEvents(requestParameters: WorkersApiRequestFeedbackOnWorkerEventsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).requestFeedbackOnWorkerEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
