/* tslint:disable */
/* eslint-disable */
/*
performanceEnablement

The Performance Management service enables applications to access and create feedback about workers in the system.

The version of the OpenAPI document: v5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AboutWorkerD396fd5bffec1000100f44a5808f0005 } from '../models';
// @ts-ignore
import { BusinessProcessParametersD396fd5bffec1000100f440bde4c0001 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 } from '../models';
// @ts-ignore
import { GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse } from '../models';
// @ts-ignore
import { RequestedByD396fd5bffec1000100f44a5808f0006 } from '../models';
// @ts-ignore
import { RequestedFeedbackCommentsD396fd5bffec10001393477e77870000 } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GiveRequestedFeedbackEventsApi - axios parameter creator
 * @export
 */
export const GiveRequestedFeedbackEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves all requested feedback given events for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of feedback given events about the user that responded to the feedback request.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionFeedbackEvents: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/giveRequestedFeedbackEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/giveRequestedFeedbackEvents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single requested feedback given event instance for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single requested feedback given event instance with the specified ID of the user that responded to the feedback request.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getInstance', 'iD', iD)
            const localVarPath = `/giveRequestedFeedbackEvents/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/giveRequestedFeedbackEvents/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event. This endpoint is equivalent to the Give Requested Feedback task in Workday.  Secured by: Give Requested Feedback REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event.
         * @param {string} iD The Workday ID of the resource.
         * @param {GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000} giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent: async (iD: string, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000: GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateEvent', 'iD', iD)
            // verify required parameter 'giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000' is not null or undefined
            assertParamExists('updateEvent', 'giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000', giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000)
            const localVarPath = `/giveRequestedFeedbackEvents/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/giveRequestedFeedbackEvents/{ID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GiveRequestedFeedbackEventsApi - functional programming interface
 * @export
 */
export const GiveRequestedFeedbackEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GiveRequestedFeedbackEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves all requested feedback given events for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of feedback given events about the user that responded to the feedback request.
         * @param {GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionFeedbackEvents(requestParameters: GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionFeedbackEvents(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a single requested feedback given event instance for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single requested feedback given event instance with the specified ID of the user that responded to the feedback request.
         * @param {GiveRequestedFeedbackEventsApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(requestParameters: GiveRequestedFeedbackEventsApiGetInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event. This endpoint is equivalent to the Give Requested Feedback task in Workday.  Secured by: Give Requested Feedback REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event.
         * @param {GiveRequestedFeedbackEventsApiUpdateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvent(requestParameters: GiveRequestedFeedbackEventsApiUpdateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000>> {
            const giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000: GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(requestParameters.iD, giveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GiveRequestedFeedbackEventsApi - factory interface
 * @export
 */
export const GiveRequestedFeedbackEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GiveRequestedFeedbackEventsApiFp(configuration)
    return {
        /**
         * Retrieves all requested feedback given events for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a collection of feedback given events about the user that responded to the feedback request.
         * @param {GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionFeedbackEvents(requestParameters: GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GiveRequestedFeedbackEventsGetCollectionFeedbackEventsResponse> {
            return localVarFp.getCollectionFeedbackEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single requested feedback given event instance for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Retrieves a single requested feedback given event instance with the specified ID of the user that responded to the feedback request.
         * @param {GiveRequestedFeedbackEventsApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(requestParameters: GiveRequestedFeedbackEventsApiGetInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> {
            return localVarFp.getInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event. This endpoint is equivalent to the Give Requested Feedback task in Workday.  Secured by: Give Requested Feedback REST+TG  Scope: Performance Enablement, Worker Profile and Skills
         * @summary Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event.
         * @param {GiveRequestedFeedbackEventsApiUpdateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent(requestParameters: GiveRequestedFeedbackEventsApiUpdateEventRequest, options?: AxiosRequestConfig): AxiosPromise<GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000> {
            return localVarFp.updateEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCollectionFeedbackEvents operation in GiveRequestedFeedbackEventsApi.
 * @export
 * @interface GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest
 */
export type GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest = {
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof GiveRequestedFeedbackEventsApiGetCollectionFeedbackEvents
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof GiveRequestedFeedbackEventsApiGetCollectionFeedbackEvents
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstance operation in GiveRequestedFeedbackEventsApi.
 * @export
 * @interface GiveRequestedFeedbackEventsApiGetInstanceRequest
 */
export type GiveRequestedFeedbackEventsApiGetInstanceRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof GiveRequestedFeedbackEventsApiGetInstance
    */
    readonly iD: string
    
}

/**
 * Request parameters for updateEvent operation in GiveRequestedFeedbackEventsApi.
 * @export
 * @interface GiveRequestedFeedbackEventsApiUpdateEventRequest
 */
export type GiveRequestedFeedbackEventsApiUpdateEventRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof GiveRequestedFeedbackEventsApiUpdateEvent
    */
    readonly iD: string
    
} & GiveRequestedFeedbackDetailsD396fd5bffec10000e3eba1a70440000

/**
 * GiveRequestedFeedbackEventsApiGenerated - object-oriented interface
 * @export
 * @class GiveRequestedFeedbackEventsApiGenerated
 * @extends {BaseAPI}
 */
export class GiveRequestedFeedbackEventsApiGenerated extends BaseAPI {
    /**
     * Retrieves all requested feedback given events for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a collection of feedback given events about the user that responded to the feedback request.
     * @param {GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveRequestedFeedbackEventsApiGenerated
     */
    public getCollectionFeedbackEvents(requestParameters: GiveRequestedFeedbackEventsApiGetCollectionFeedbackEventsRequest = {}, options?: AxiosRequestConfig) {
        return GiveRequestedFeedbackEventsApiFp(this.configuration).getCollectionFeedbackEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single requested feedback given event instance for the user that responded to the feedback request.  Secured by: Self-Service: Role Requested Feedback, Self-Service: Self Requested Feedback  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Retrieves a single requested feedback given event instance with the specified ID of the user that responded to the feedback request.
     * @param {GiveRequestedFeedbackEventsApiGetInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveRequestedFeedbackEventsApiGenerated
     */
    public getInstance(requestParameters: GiveRequestedFeedbackEventsApiGetInstanceRequest, options?: AxiosRequestConfig) {
        return GiveRequestedFeedbackEventsApiFp(this.configuration).getInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event. This endpoint is equivalent to the Give Requested Feedback task in Workday.  Secured by: Give Requested Feedback REST+TG  Scope: Performance Enablement, Worker Profile and Skills
     * @summary Updates the Give Requested Feedback Event that matches the WID in the url, and the current authenticated user is a responder for the event.
     * @param {GiveRequestedFeedbackEventsApiUpdateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiveRequestedFeedbackEventsApiGenerated
     */
    public updateEvent(requestParameters: GiveRequestedFeedbackEventsApiUpdateEventRequest, options?: AxiosRequestConfig) {
        return GiveRequestedFeedbackEventsApiFp(this.configuration).updateEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
